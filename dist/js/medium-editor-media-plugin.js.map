{"version":3,"sources":["core.js","embeds.js","images.js","templates.js"],"names":[],"mappingsnrxtfile":"medium-editor-media-plugin.js","sourcesContent":[";(function ($, window, document, undefined) {\n\n    'use strict';\n\n    /** Default values */\n    var pluginName = 'mediumMedia',\n        defaults = {\n            editor: null,\n            enabled: true,\n            addons: {\n                images: true, // boolean or object containing configuration\n                embeds: true\n            }\n        };\n\n    /**\n     * Capitalize first character\n     *\n     * @param {string} str\n     * @return {string}\n     */\n\n    function ucfirst(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Core plugin's object\n     *\n     * Sets options, variables and calls init() function\n     *\n     * @constructor\n     * @param {DOM} el - DOM element to init the plugin on\n     * @param {object} options - Options to override defaults\n     * @return {void}\n     */\n\n    function Core(el, options) {\n        var editor;\n\n        this.el = el;\n        this.$el = $(el);\n        this.templates = window.MediumInsert.Templates;\n\n        if (options) {\n            // Fix #142\n            // Avoid deep copying editor object, because since v2.3.0 it contains circular references which causes jQuery.extend to break\n            // Instead copy editor object to this.options manually\n            editor = options.editor;\n            options.editor = null;\n        }\n        this.options = $.extend(true, {}, defaults, options);\n        this.options.editor = editor;\n\n        this._defaults = defaults;\n        this._name = pluginName;\n\n        // Extend editor's functions\n        if (this.options && this.options.editor) {\n            this.options.editor._serialize = this.options.editor.serialize;\n            this.options.editor._destroy = this.options.editor.destroy;\n            this.options.editor._setup = this.options.editor.setup;\n            this.options.editor._hideInsertButtons = this.hideButtons;\n\n            this.options.editor.serialize = this.editorSerialize;\n            this.options.editor.destroy = this.editorDestroy;\n            this.options.editor.setup = this.editorSetup;\n\n            if (this.options.editor.getExtensionByName('placeholder') !== undefined) {\n                this.options.editor.getExtensionByName('placeholder').updatePlaceholder = this.editorUpdatePlaceholder;\n            }\n        }\n    }\n\n    /**\n     * Initialization\n     *\n     * @return {void}\n     */\n\n    Core.prototype.init = function () {\n        this.$el.addClass('medium-editor-insert-plugin');\n\n        if (typeof this.options.addons !== 'object' || Object.keys(this.options.addons).length === 0) {\n            this.disable();\n        }\n\n        this.initAddons();\n        this.clean();\n        this.events();\n    };\n\n    /**\n     * Event listeners\n     *\n     * @return {void}\n     */\n\n    Core.prototype.events = function () {\n        var that = this;\n\n        this.$el\n            .on('dragover drop', function (e) {\n                e.preventDefault();\n            })\n            .on('keyup click', $.proxy(this, 'toggleButtons'))\n            .on('selectstart mousedown', '.medium-media, .medium-media-buttons', $.proxy(this, 'disableSelection'))\n            .on('click', '.medium-media-buttons-show', $.proxy(this, 'toggleAddons'))\n            .on('click', '.medium-media-action', $.proxy(this, 'addonAction'))\n            .on('paste', '.medium-media-caption-placeholder', function (e) {\n                $.proxy(that, 'removeCaptionPlaceholder')($(e.target));\n            });\n\n        $(window).on('resize', $.proxy(this, 'positionButtons', null));\n    };\n\n    /**\n     * Return editor instance\n     *\n     * @return {object} MediumEditor\n     */\n\n    Core.prototype.getEditor = function () {\n        return this.options.editor;\n    };\n\n    /**\n     * Extend editor's serialize function\n     *\n     * @return {object} Serialized data\n     */\n\n    Core.prototype.editorSerialize = function () {\n        var data = this._serialize();\n\n        $.each(data, function (key) {\n            var $data = $('<div />').html(data[key].value);\n\n            $data.find('.medium-media-buttons').remove();\n\n            // Restore original embed code from embed wrapper attribute value.\n            $data.find('[data-embed-code]').each(function () {\n                var $this = $(this);\n                $this.html($this.attr('data-embed-code'));\n            });\n\n            data[key].value = $data.html();\n        });\n\n        return data;\n    };\n\n    /**\n     * Extend editor's destroy function to deactivate this plugin too\n     *\n     * @return {void}\n     */\n\n    Core.prototype.editorDestroy = function () {\n        $.each(this.elements, function (key, el) {\n            if ($(el).data('plugin_' + pluginName) instanceof Core) {\n                $(el).data('plugin_' + pluginName).disable();\n            }\n        });\n\n        this._destroy();\n    };\n\n    /**\n     * Extend editor's setup function to activate this plugin too\n     *\n     * @return {void}\n     */\n\n    Core.prototype.editorSetup = function () {\n        this._setup();\n\n        $.each(this.elements, function (key, el) {\n            if ($(el).data('plugin_' + pluginName) instanceof Core) {\n                $(el).data('plugin_' + pluginName).enable();\n            }\n        });\n    };\n\n    /**\n     * Extend editor's placeholder.updatePlaceholder function to show placeholder dispite of the plugin buttons\n     *\n     * @return {void}\n     */\n\n    Core.prototype.editorUpdatePlaceholder = function (el, dontShow) {\n        var contents = $(el).children()\n            .not('.medium-media-buttons').contents();\n\n        if (!dontShow && contents.length === 1 && contents[0].nodeName.toLowerCase() === 'br') {\n            this.showPlaceholder(el);\n            this.base._hideInsertButtons($(el));\n        } else {\n            this.hidePlaceholder(el);\n        }\n    };\n\n    /**\n     * Trigger editableInput on editor\n     *\n     * @return {void}\n     */\n\n    Core.prototype.triggerInput = function () {\n        if (this.getEditor()) {\n            this.getEditor().trigger('editableInput', null, this.el);\n        }\n    };\n\n    /**\n     * Deselects selected text\n     *\n     * @return {void}\n     */\n\n    Core.prototype.deselect = function () {\n        document.getSelection().removeAllRanges();\n    };\n\n    /**\n     * Disables the plugin\n     *\n     * @return {void}\n     */\n\n    Core.prototype.disable = function () {\n        this.options.enabled = false;\n\n        this.$el.find('.medium-media-buttons').addClass('hide');\n    };\n\n    /**\n     * Enables the plugin\n     *\n     * @return {void}\n     */\n\n    Core.prototype.enable = function () {\n        this.options.enabled = true;\n\n        this.$el.find('.medium-media-buttons').removeClass('hide');\n    };\n\n    /**\n     * Disables selectstart mousedown events on plugin elements except images\n     *\n     * @return {void}\n     */\n\n    Core.prototype.disableSelection = function (e) {\n        var $el = $(e.target);\n\n        if ($el.is('img') === false || $el.hasClass('medium-insert-buttons-show')) {\n            e.preventDefault();\n        }\n    };\n\n    /**\n     * Initialize addons\n     *\n     * @return {void}\n     */\n\n    Core.prototype.initAddons = function () {\n        var that = this;\n\n        if (!this.options.addons || this.options.addons.length === 0) {\n            return;\n        }\n\n        $.each(this.options.addons, function (addon, options) {\n            var addonName = pluginName + ucfirst(addon);\n\n            if (options === false) {\n                delete that.options.addons[addon];\n                return;\n            }\n\n            that.$el[addonName](options);\n            that.options.addons[addon] = that.$el.data('plugin_' + addonName).options;\n        });\n    };\n\n    /**\n     * Cleans a content of the editor\n     *\n     * @return {void}\n     */\n\n    Core.prototype.clean = function () {\n        var that = this,\n            $buttons, $lastEl, $text;\n\n        if (this.options.enabled === false) {\n            return;\n        }\n\n        if (this.$el.children().length === 0) {\n            this.$el.html(this.templates['src/js/templates/core-empty-line.hbs']().trim());\n        }\n\n        // Fix #29\n        // Wrap content text in <p></p> to avoid Firefox problems\n        $text = this.$el\n            .contents()\n            .filter(function () {\n                return (this.nodeName === '#text' && $.trim($(this).text()) !== '') || this.nodeName.toLowerCase() === 'br';\n            });\n\n        $text.each(function () {\n            $(this).wrap('<p />');\n\n            // Fix #145\n            // Move caret at the end of the element that's being wrapped\n            that.moveCaret($(this).parent(), $(this).text().length);\n        });\n\n        this.addButtons();\n\n        $buttons = this.$el.find('.medium-media-buttons');\n        $lastEl = $buttons.prev();\n        if ($lastEl.attr('class') && $lastEl.attr('class').match(/medium\\-insert(?!\\-active)/)) {\n            $buttons.before(this.templates['src/js/templates/core-empty-line.hbs']().trim());\n        }\n    };\n\n    /**\n     * Returns HTML template of buttons\n     *\n     * @return {string} HTML template of buttons\n     */\n\n    Core.prototype.getButtons = function () {\n        if (this.options.enabled === false) {\n            return;\n        }\n\n        return this.templates['src/js/templates/core-buttons.hbs']({\n            addons: this.options.addons\n        }).trim();\n    };\n\n    /**\n     * Appends buttons at the end of the $el\n     *\n     * @return {void}\n     */\n\n    Core.prototype.addButtons = function () {\n        if (this.$el.find('.medium-media-buttons').length === 0) {\n            this.$el.append(this.getButtons());\n        }\n    };\n\n    /**\n     * Move buttons to current active, empty paragraph and show them\n     *\n     * @return {void}\n     */\n\n    Core.prototype.toggleButtons = function (e) {\n        var $el = $(e.target),\n            selection = window.getSelection(),\n            that = this,\n            range, $current, $p, activeAddon;\n\n        if (this.options.enabled === false) {\n            return;\n        }\n\n        if (!selection || selection.rangeCount === 0) {\n            $current = $el;\n        } else {\n            range = selection.getRangeAt(0);\n            $current = $(range.commonAncestorContainer);\n        }\n\n        // When user clicks on  editor's placeholder in FF, $current el is editor itself, not the first paragraph as it should\n        if ($current.hasClass('medium-editor-insert-plugin')) {\n            $current = $current.find('p:first');\n        }\n\n        $p = $current.is('p') ? $current : $current.closest('p');\n\n        this.clean();\n\n        if ($el.hasClass('medium-editor-placeholder') === false && $el.closest('.medium-media-buttons').length === 0 && $current.closest('.medium-media-buttons').length === 0) {\n\n            this.$el.find('.medium-media-active').removeClass('medium-insert-active');\n\n            $.each(this.options.addons, function (addon) {\n                if ($el.closest('.medium-media-' + addon).length) {\n                    $current = $el;\n                }\n\n                if ($current.closest('.medium-media-' + addon).length) {\n                    $p = $current.closest('.medium-media-' + addon);\n                    activeAddon = addon;\n                    return;\n                }\n            });\n\n            if ($p.length && (($p.text().trim() === '' && !activeAddon) || activeAddon === 'images')) {\n                $p.addClass('medium-insert-active');\n\n                // If buttons are displayed on addon paragraph, wait 100ms for possible captions to display\n                setTimeout(function () {\n                    that.positionButtons(activeAddon);\n                    that.showButtons(activeAddon);\n                }, activeAddon ? 100 : 0);\n            } else {\n                this.hideButtons();\n            }\n        }\n    };\n\n    /**\n     * Show buttons\n     *\n     * @param {string} activeAddon - Name of active addon\n     * @returns {void}\n     */\n\n    Core.prototype.showButtons = function (activeAddon) {\n        var $buttons = this.$el.find('.medium-media-buttons');\n\n        $buttons.show();\n        $buttons.find('li').show();\n\n        if (activeAddon) {\n            $buttons.find('li').hide();\n            $buttons.find('a[data-addon=\"' + activeAddon + '\"]').parent().show();\n        }\n    };\n\n    /**\n     * Hides buttons\n     *\n     * @param {jQuery} $el - Editor element\n     * @returns {void}\n     */\n\n    Core.prototype.hideButtons = function ($el) {\n        $el = $el || this.$el;\n\n        $el.find('.medium-media-buttons').hide();\n        $el.find('.medium-media-buttons-addons').hide();\n        $el.find('.medium-media-buttons-show').removeClass('medium-insert-buttons-rotate');\n    };\n\n    /**\n     * Position buttons\n     *\n     * @param {string} activeAddon - Name of active addon\n     * @return {void}\n     */\n\n    Core.prototype.positionButtons = function (activeAddon) {\n        var $buttons = this.$el.find('.medium-media-buttons'),\n            $p = this.$el.find('.medium-media-active'),\n            $first = $p.find('figure:first').length ? $p.find('figure:first') : $p,\n            left, top;\n\n        if ($p.length) {\n\n            left = $p.position().left - parseInt($buttons.find('.medium-media-buttons-addons').css('left'), 10) - parseInt($buttons.find('.medium-media-buttons-addons a:first').css('margin-left'), 10);\n            left = left < 0 ? $p.position().left : left;\n            top = $p.position().top + parseInt($p.css('margin-top'), 10);\n\n            if (activeAddon) {\n                if ($p.position().left !== $first.position().left) {\n                    left = $first.position().left;\n                }\n\n                top += $p.height() + 15; // 15px offset\n            }\n\n            $buttons.css({\n                left: left,\n                top: top\n            });\n        }\n    };\n\n    /**\n     * Toggles addons buttons\n     *\n     * @return {void}\n     */\n\n    Core.prototype.toggleAddons = function () {\n        this.$el.find('.medium-media-buttons-addons').fadeToggle();\n        this.$el.find('.medium-media-buttons-show').toggleClass('medium-insert-buttons-rotate');\n    };\n\n    /**\n     * Hide addons buttons\n     *\n     * @return {void}\n     */\n\n    Core.prototype.hideAddons = function () {\n        this.$el.find('.medium-media-buttons-addons').hide();\n        this.$el.find('.medium-media-buttons-show').removeClass('medium-insert-buttons-rotate');\n    };\n\n    /**\n     * Call addon's action\n     *\n     * @param {Event} e\n     * @return {void}\n     */\n\n    Core.prototype.addonAction = function (e) {\n        var $a = $(e.target).is('a') ? $(e.target) : $(e.target).closest('a'),\n            addon = $a.data('addon'),\n            action = $a.data('action');\n\n        this.$el.data('plugin_' + pluginName + ucfirst(addon))[action]();\n    };\n\n    /**\n     * Move caret at the beginning of the empty paragraph\n     *\n     * @param {jQuery} $el Element where to place the caret\n     * @param {integer} position Position where to move caret. Default: 0\n     *\n     * @return {void}\n     */\n\n    Core.prototype.moveCaret = function ($el, position) {\n        var range, sel, el, textEl;\n\n        position = position || 0;\n        range = document.createRange();\n        sel = window.getSelection();\n        el = $el.get(0);\n\n        if (!el.childNodes.length) {\n            textEl = document.createTextNode(' ');\n            el.appendChild(textEl);\n        }\n\n        range.setStart(el.childNodes[0], position);\n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n    };\n\n    /**\n     * Add caption\n     *\n     * @param {jQuery Element} $el\n     * @param {string} placeholder\n     * @return {void}\n     */\n\n    Core.prototype.addCaption = function ($el, placeholder) {\n        var $caption = $el.find('figcaption');\n\n        if ($caption.length === 0) {\n            $el.append(this.templates['src/js/templates/core-caption.hbs']({\n                placeholder: placeholder\n            }));\n        }\n    };\n\n    /**\n     * Remove captions\n     *\n     * @param {jQuery Element} $ignore\n     * @return {void}\n     */\n\n    Core.prototype.removeCaptions = function ($ignore) {\n        var $captions = this.$el.find('figcaption');\n\n        if ($ignore) {\n            $captions = $captions.not($ignore);\n        }\n\n        $captions.each(function () {\n            if ($(this).hasClass('medium-insert-caption-placeholder') || $(this).text().trim() === '') {\n                $(this).remove();\n            }\n        });\n    };\n\n    /**\n     * Remove caption placeholder\n     *\n     * @param {jQuery Element} $el\n     * @return {void}\n     */\n\n    Core.prototype.removeCaptionPlaceholder = function ($el) {\n        var $caption = $el.is('figcaption') ? $el : $el.find('figcaption');\n\n        if ($caption.length) {\n            $caption\n                .removeClass('medium-insert-caption-placeholder')\n                .removeAttr('data-placeholder');\n        }\n    };\n\n    /** Plugin initialization */\n\n    $.fn[pluginName] = function (options) {\n        return this.each(function () {\n            var that = this,\n                textareaId;\n\n            if ($(that).is('textarea')) {\n                textareaId = $(that).attr('medium-editor-textarea-id');\n                that = $(that).siblings('[medium-editor-textarea-id=\"' + textareaId + '\"]').get(0);\n            }\n\n            if (!$.data(that, 'plugin_' + pluginName)) {\n                // Plugin initialization\n                $.data(that, 'plugin_' + pluginName, new Core(that, options));\n                $.data(that, 'plugin_' + pluginName).init();\n            } else if (typeof options === 'string' && $.data(that, 'plugin_' + pluginName)[options]) {\n                // Method call\n                $.data(that, 'plugin_' + pluginName)[options]();\n            }\n        });\n    };\n\n})(jQuery, window, document);\n","; (function ($, window, document, undefined) {\n\n    'use strict';\n\n    /** Default values */\n    var pluginName = 'mediumMedia',\n        addonName = 'Embeds', // first char is uppercase\n        defaults = {\n            label: '<span class=\"fa fa-youtube-play\"></span>',\n            placeholder: 'Paste a URL to your YouTube or Vimeo video and press enter...',\n            oembedProxy: 'http://medium.iframe.ly/api/oembed?iframe=1',\n            captions: true,\n            captionPlaceholder: 'Type caption (optional)',\n            styles: {\n                wide: {\n                    label: '<span class=\"fa fa-align-justify\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                },\n                left: {\n                    label: '<span class=\"fa fa-align-left\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                },\n                right: {\n                    label: '<span class=\"fa fa-align-right\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                }\n            },\n            actions: {\n                remove: {\n                    label: '<span class=\"fa fa-times\"></span>',\n                    clicked: function () {\n                        var $event = $.Event('keydown');\n\n                        $event.which = 8;\n                        $(document).trigger($event);\n                    }\n                }\n            },\n            parseOnPaste: false\n        };\n\n    /**\n     * Embeds object\n     *\n     * Sets options, variables and calls init() function\n     *\n     * @constructor\n     * @param {DOM} el - DOM element to init the plugin on\n     * @param {object} options - Options to override defaults\n     * @return {void}\n     */\n\n    function Embeds(el, options) {\n        this.el = el;\n        this.$el = $(el);\n        this.templates = window.MediumInsert.Templates;\n        this.core = this.$el.data('plugin_' + pluginName);\n\n        this.options = $.extend(true, {}, defaults, options);\n\n        this._defaults = defaults;\n        this._name = pluginName;\n\n        // Extend editor's functions\n        if (this.core.getEditor()) {\n            this.core.getEditor()._serializePreEmbeds = this.core.getEditor().serialize;\n            this.core.getEditor().serialize = this.editorSerialize;\n        }\n\n        this.init();\n    }\n\n    /**\n     * Initialization\n     *\n     * @return {void}\n     */\n\n    Embeds.prototype.init = function () {\n        var $embeds = this.$el.find('.medium-media-embeds');\n\n        $embeds.attr('contenteditable', false);\n        $embeds.each(function () {\n            if ($(this).find('.medium-media-embeds-overlay').length === 0) {\n                $(this).append($('<div />').addClass('medium-insert-embeds-overlay'));\n            }\n        });\n\n        this.events();\n        this.backwardsCompatibility();\n    };\n\n    /**\n     * Event listeners\n     *\n     * @return {void}\n     */\n\n    Embeds.prototype.events = function () {\n        $(document)\n            .on('click', $.proxy(this, 'unselectEmbed'))\n            .on('keydown', $.proxy(this, 'removeEmbed'))\n            .on('click', '.medium-media-embeds-toolbar .medium-editor-action', $.proxy(this, 'toolbarAction'))\n            .on('click', '.medium-media-embeds-toolbar2 .medium-editor-action', $.proxy(this, 'toolbar2Action'));\n\n        this.$el\n            .on('keyup click paste', $.proxy(this, 'togglePlaceholder'))\n            .on('keydown', $.proxy(this, 'processLink'))\n            .on('click', '.medium-media-embeds-overlay', $.proxy(this, 'selectEmbed'))\n            .on('contextmenu', '.medium-media-embeds-placeholder', $.proxy(this, 'fixRightClickOnPlaceholder'));\n\n        if (this.options.parseOnPaste) {\n            this.$el\n                .on('paste', $.proxy(this, 'processPasted'));\n        }\n    };\n\n    /**\n     * Replace v0.* class names with new ones, wrap embedded content to new structure\n     *\n     * @return {void}\n     */\n\n    Embeds.prototype.backwardsCompatibility = function () {\n        var that = this;\n\n        this.$el.find('.mediumMedia-embeds')\n            .removeClass('mediumMedia-embeds')\n            .addClass('medium-media-embeds');\n\n        this.$el.find('.medium-media-embeds').each(function () {\n            if ($(this).find('.medium-media-embed').length === 0) {\n                $(this).after(that.templates['src/js/templates/embeds-wrapper.hbs']({\n                    html: $(this).html()\n                }));\n                $(this).remove();\n            }\n        });\n    };\n\n    /**\n     * Extend editor's serialize function\n     *\n     * @return {object} Serialized data\n     */\n\n    Embeds.prototype.editorSerialize = function () {\n        var data = this._serializePreEmbeds();\n\n        $.each(data, function (key) {\n            var $data = $('<div />').html(data[key].value);\n\n            $data.find('.medium-media-embeds').removeAttr('contenteditable');\n            $data.find('.medium-media-embeds-overlay').remove();\n\n            data[key].value = $data.html();\n        });\n\n        return data;\n    };\n\n    /**\n     * Add embedded element\n     *\n     * @return {void}\n     */\n\n    Embeds.prototype.add = function () {\n        var $place = this.$el.find('.medium-media-active');\n\n        // Fix #132\n        // Make sure that the content of the paragraph is empty and <br> is wrapped in <p></p> to avoid Firefox problems\n        $place.html(this.templates['src/js/templates/core-empty-line.hbs']().trim());\n\n        // Replace paragraph with div to prevent #124 issue with pasting in Chrome,\n        // because medium editor wraps inserted content into paragraph and paragraphs can't be nested\n        if ($place.is('p')) {\n            $place.replaceWith('<div class=\"medium-insert-active\">' + $place.html() + '</div>');\n            $place = this.$el.find('.medium-media-active');\n            this.core.moveCaret($place);\n        }\n\n        $place.addClass('medium-insert-embeds medium-insert-embeds-input medium-insert-embeds-active');\n\n        this.togglePlaceholder({ target: $place.get(0) });\n\n        $place.click();\n        this.core.hideButtons();\n    };\n\n    /**\n     * Toggles placeholder\n     *\n     * @param {Event} e\n     * @return {void}\n     */\n\n    Embeds.prototype.togglePlaceholder = function (e) {\n        var $place = $(e.target),\n            selection = window.getSelection(),\n            range, $current, text;\n\n        if (!selection || selection.rangeCount === 0) {\n            return;\n        }\n\n        range = selection.getRangeAt(0);\n        $current = $(range.commonAncestorContainer);\n\n        if ($current.hasClass('medium-insert-embeds-active')) {\n            $place = $current;\n        } else if ($current.closest('.medium-media-embeds-active').length) {\n            $place = $current.closest('.medium-media-embeds-active');\n        }\n\n        if ($place.hasClass('medium-insert-embeds-active')) {\n\n            text = $place.text().trim();\n\n            if (text === '' && $place.hasClass('medium-insert-embeds-placeholder') === false) {\n                $place\n                    .addClass('medium-insert-embeds-placeholder')\n                    .attr('data-placeholder', this.options.placeholder);\n            } else if (text !== '' && $place.hasClass('medium-insert-embeds-placeholder')) {\n                $place\n                    .removeClass('medium-insert-embeds-placeholder')\n                    .removeAttr('data-placeholder');\n            }\n\n        } else {\n            this.$el.find('.medium-media-embeds-active').remove();\n        }\n    };\n\n    /**\n     * Right click on placeholder in Chrome selects whole line. Fix this by placing caret at the end of line\n     *\n     * @param {Event} e\n     * @return {void}\n     */\n\n    Embeds.prototype.fixRightClickOnPlaceholder = function (e) {\n        this.core.moveCaret($(e.target));\n    };\n\n    /**\n     * Process link\n     *\n     * @param {Event} e\n     * @return {void}\n     */\n\n    Embeds.prototype.processLink = function (e) {\n        var $place = this.$el.find('.medium-media-embeds-active'),\n            url;\n\n        if (!$place.length) {\n            return;\n        }\n\n        url = $place.text().trim();\n\n        // Return empty placeholder on backspace, delete or enter\n        if (url === '' && [8, 46, 13].indexOf(e.which) !== -1) {\n            $place.remove();\n            return;\n        }\n\n        if (e.which === 13) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this.options.oembedProxy) {\n                this.oembed(url);\n            } else {\n                this.parseUrl(url);\n            }\n        }\n    };\n\n    /**\n     * Process Pasted\n     *\n     * @param {Event} e\n     * @return {void}\n     */\n\n    Embeds.prototype.processPasted = function (e) {\n        var pastedUrl, linkRegEx;\n        if ($(\".medium-media-embeds-active\").length) {\n            return;\n        }\n\n        pastedUrl = e.originalEvent.clipboardData.getData('text');\n        linkRegEx = new RegExp('^(http(s?):)?\\/\\/','i');\n        if (linkRegEx.test(pastedUrl)) {\n            if (this.options.oembedProxy) {\n                this.oembed(pastedUrl, true);\n            } else {\n                this.parseUrl(pastedUrl, true);\n            }\n        }\n    };\n\n    /**\n     * Get HTML via oEmbed proxy\n     *\n     * @param {string} url\n     * @return {void}\n     */\n\n    Embeds.prototype.oembed = function (url, pasted) {\n        var that = this;\n\n        $.support.cors = true;\n\n        $.ajax({\n            crossDomain: true,\n            cache: false,\n            url: this.options.oembedProxy,\n            dataType: 'json',\n            data: {\n                url: url\n            },\n            success: function (data) {\n                var html = data && data.html;\n\n                if (data && !html && data.type === 'photo' && data.url) {\n                    html = '<img src=\"' + data.url + '\" alt=\"\">';\n                }\n\n                if (!html) {\n                    // Prevent render empty embed.\n                    $.proxy(that, 'convertBadEmbed', url)();\n                    return;\n                }\n\n                if (pasted) {\n                    $.proxy(that, 'embed', html, url)();\n                } else {\n                    $.proxy(that, 'embed', html)();\n                }\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                var responseJSON = (function () {\n                    try {\n                        return JSON.parse(jqXHR.responseText);\n                    } catch (e) { }\n                })();\n\n                if (typeof window.console !== 'undefined') {\n                    window.console.log((responseJSON && responseJSON.error) || jqXHR.status || errorThrown.message);\n                } else {\n                    window.alert('Error requesting media from ' + that.options.oembedProxy + ' to insert: ' + errorThrown + ' (response status: ' + jqXHR.status + ')');\n                }\n\n                $.proxy(that, 'convertBadEmbed', url)();\n            }\n        });\n    };\n\n    /**\n     * Get HTML using regexp\n     *\n     * @param {string} url\n     * @param {bool} pasted\n     * @return {void}\n     */\n\n    Embeds.prototype.parseUrl = function (url, pasted) {\n        var html;\n\n        if (!(new RegExp(['youtube', 'youtu.be', 'vimeo', 'instagram', 'twitter', 'facebook'].join('|')).test(url))) {\n            $.proxy(this, 'convertBadEmbed', url)();\n            return false;\n        }\n\n        html = url.replace(/\\n?/g, '')\n            .replace(/^((http(s)?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/(watch\\?v=|v\\/)?)([a-zA-Z0-9\\-_]+)(.*)?$/, '<div class=\"video video-youtube\"><iframe width=\"420\" height=\"315\" src=\"//www.youtube.com/embed/$7\" frameborder=\"0\" allowfullscreen></iframe></div>')\n            .replace(/^https?:\\/\\/vimeo\\.com(\\/.+)?\\/([0-9]+)$/, '<div class=\"video video-vimeo\"><iframe src=\"//player.vimeo.com/video/$2\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></div>')\n            .replace(/^https:\\/\\/twitter\\.com\\/(\\w+)\\/status\\/(\\d+)\\/?$/, '<blockquote class=\"twitter-tweet\" align=\"center\" lang=\"en\"><a href=\"https://twitter.com/$1/statuses/$2\"></a></blockquote><script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>')\n            .replace(/^(https:\\/\\/www\\.facebook\\.com\\/(.*))$/, '<script src=\"//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.2\" async></script><div class=\"fb-post\" data-href=\"$1\"><div class=\"fb-xfbml-parse-ignore\"><a href=\"$1\">Loading Facebook post...</a></div></div>')\n            .replace(/^https?:\\/\\/instagram\\.com\\/p\\/(.+)\\/?$/, '<span class=\"instagram\"><iframe src=\"//instagram.com/p/$1/embed/\" width=\"612\" height=\"710\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe></span>');\n\n        if ((/<(\"[^\"]*\"|'[^']*'|[^'\">])*>/).test(html) === false) {\n            $.proxy(this, 'convertBadEmbed', url)();\n            return false;\n        }\n\n        if (pasted) {\n            this.embed(html, url);\n        } else {\n            this.embed(html);\n        }\n    };\n\n    /**\n     * Add html to page\n     *\n     * @param {string} html\n     * @param {string} pastedUrl\n     * @return {void}\n     */\n\n    Embeds.prototype.embed = function (html, pastedUrl) {\n        var $place = this.$el.find('.medium-media-embeds-active'),\n            $div;\n\n        if (!html) {\n            alert('Incorrect URL format specified');\n            return false;\n        } else {\n            if (html.indexOf('</script>') > -1) {\n                // Store embed code with <script> tag inside wrapper attribute value.\n                // Make nice attribute value escaping using jQuery.\n                $div = $('<div>')\n                    .attr('data-embed-code', html)\n                    .html(html);\n                html = $('<div>').append($div).html();\n            }\n\n            if (pastedUrl) {\n                // Get the element with the pasted url\n                // place the embed template and remove the pasted text\n                $place = this.$el.find(\":not(iframe, script, style)\")\n                    .contents().filter(\n                        function () {\n                            return this.nodeType === 3 && this.textContent.indexOf(pastedUrl) > -1;\n                        }).parent();\n\n                $place.after(this.templates['src/js/templates/embeds-wrapper.hbs']({\n                    html: html\n                }));\n                $place.text($place.text().replace(pastedUrl, ''));\n            } else {\n                $place.after(this.templates['src/js/templates/embeds-wrapper.hbs']({\n                    html: html\n                }));\n                $place.remove();\n            }\n\n\n            this.core.triggerInput();\n\n            if (html.indexOf('facebook') !== -1) {\n                if (typeof (FB) !== 'undefined') {\n                    setTimeout(function () {\n                        FB.XFBML.parse();\n                    }, 2000);\n                }\n            }\n        }\n    };\n\n    /**\n     * Convert bad oEmbed content to an actual line.\n     * Instead of displaying the error message we convert the bad embed\n     *\n     * @param {string} content Bad content\n     *\n     * @return {void}\n     */\n    Embeds.prototype.convertBadEmbed = function (content) {\n        var $place, $empty, $content,\n            emptyTemplate = this.templates['src/js/templates/core-empty-line.hbs']().trim();\n\n        $place = this.$el.find('.medium-media-embeds-active');\n\n        // convert embed node to an empty node and insert the bad embed inside\n        $content = $(emptyTemplate);\n        $place.before($content);\n        $place.remove();\n        $content.html(content);\n\n        // add an new empty node right after to simulate Enter press\n        $empty = $(emptyTemplate);\n        $content.after($empty);\n\n        this.core.triggerInput();\n\n        this.core.moveCaret($empty);\n    };\n\n    /**\n     * Select clicked embed\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Embeds.prototype.selectEmbed = function (e) {\n        var that = this,\n            $embed;\n        if (this.core.options.enabled) {\n            $embed = $(e.target).hasClass('medium-insert-embeds') ? $(e.target) : $(e.target).closest('.medium-media-embeds');\n\n            $embed.addClass('medium-insert-embeds-selected');\n\n            setTimeout(function () {\n                that.addToolbar();\n\n                if (that.options.captions) {\n                    that.core.addCaption($embed.find('figure'), that.options.captionPlaceholder);\n                }\n            }, 50);\n        }\n    };\n\n    /**\n     * Unselect selected embed\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Embeds.prototype.unselectEmbed = function (e) {\n        var $el = $(e.target).hasClass('medium-insert-embeds') ? $(e.target) : $(e.target).closest('.medium-media-embeds'),\n            $embed = this.$el.find('.medium-media-embeds-selected');\n\n        if ($el.hasClass('medium-insert-embeds-selected')) {\n            $embed.not($el).removeClass('medium-insert-embeds-selected');\n            $('.medium-media-embeds-toolbar, .medium-media-embeds-toolbar2').remove();\n            this.core.removeCaptions($el.find('figcaption'));\n\n            if ($(e.target).is('.medium-media-caption-placeholder') || $(e.target).is('figcaption')) {\n                $el.removeClass('medium-insert-embeds-selected');\n                this.core.removeCaptionPlaceholder($el.find('figure'));\n            }\n            return;\n        }\n\n        $embed.removeClass('medium-insert-embeds-selected');\n        $('.medium-media-embeds-toolbar, .medium-media-embeds-toolbar2').remove();\n\n        if ($(e.target).is('.medium-media-caption-placeholder')) {\n            this.core.removeCaptionPlaceholder($el.find('figure'));\n        } else if ($(e.target).is('figcaption') === false) {\n            this.core.removeCaptions();\n        }\n    };\n\n    /**\n     * Remove embed\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Embeds.prototype.removeEmbed = function (e) {\n        var $embed, $empty;\n\n        if (e.which === 8 || e.which === 46) {\n            $embed = this.$el.find('.medium-media-embeds-selected');\n\n            if ($embed.length) {\n                e.preventDefault();\n\n                $('.medium-media-embeds-toolbar, .medium-media-embeds-toolbar2').remove();\n\n                $empty = $(this.templates['src/js/templates/core-empty-line.hbs']().trim());\n                $embed.before($empty);\n                $embed.remove();\n\n                // Hide addons\n                this.core.hideAddons();\n\n                this.core.moveCaret($empty);\n                this.core.triggerInput();\n            }\n        }\n    };\n\n    /**\n     * Adds embed toolbar to editor\n     *\n     * @returns {void}\n     */\n\n    Embeds.prototype.addToolbar = function () {\n        var $embed = this.$el.find('.medium-media-embeds-selected'),\n            active = false,\n            $toolbar, $toolbar2, top, mediumEditor, toolbarContainer;\n\n        if ($embed.length === 0) {\n            return;\n        }\n\n        mediumEditor = this.core.getEditor();\n        toolbarContainer = mediumEditor.options.elementsContainer || 'body';\n\n        $(toolbarContainer).append(this.templates['src/js/templates/embeds-toolbar.hbs']({\n            styles: this.options.styles,\n            actions: this.options.actions\n        }).trim());\n\n        $toolbar = $('.medium-media-embeds-toolbar');\n        $toolbar2 = $('.medium-media-embeds-toolbar2');\n\n        top = $embed.offset().top - $toolbar.height() - 8 - 2 - 5; // 8px - hight of an arrow under toolbar, 2px - height of an embed outset, 5px - distance from an embed\n        if (top < 0) {\n            top = 0;\n        }\n\n        $toolbar\n            .css({\n                top: top,\n                left: $embed.offset().left + $embed.width() / 2 - $toolbar.width() / 2\n            })\n            .show();\n\n        $toolbar2\n            .css({\n                top: $embed.offset().top + 2, // 2px - distance from a border\n                left: $embed.offset().left + $embed.width() - $toolbar2.width() - 4 // 4px - distance from a border\n            })\n            .show();\n\n        $toolbar.find('button').each(function () {\n            if ($embed.hasClass('medium-insert-embeds-' + $(this).data('action'))) {\n                $(this).addClass('medium-editor-button-active');\n                active = true;\n            }\n        });\n\n        if (active === false) {\n            $toolbar.find('button').first().addClass('medium-editor-button-active');\n        }\n    };\n\n    /**\n     * Fires toolbar action\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Embeds.prototype.toolbarAction = function (e) {\n        var $button = $(e.target).is('button') ? $(e.target) : $(e.target).closest('button'),\n            $li = $button.closest('li'),\n            $ul = $li.closest('ul'),\n            $lis = $ul.find('li'),\n            $embed = this.$el.find('.medium-media-embeds-selected'),\n            that = this;\n\n        $button.addClass('medium-editor-button-active');\n        $li.siblings().find('.medium-editor-button-active').removeClass('medium-editor-button-active');\n\n        $lis.find('button').each(function () {\n            var className = 'medium-insert-embeds-' + $(this).data('action');\n\n            if ($(this).hasClass('medium-editor-button-active')) {\n                $embed.addClass(className);\n\n                if (that.options.styles[$(this).data('action')].added) {\n                    that.options.styles[$(this).data('action')].added($embed);\n                }\n            } else {\n                $embed.removeClass(className);\n\n                if (that.options.styles[$(this).data('action')].removed) {\n                    that.options.styles[$(this).data('action')].removed($embed);\n                }\n            }\n        });\n\n        this.core.triggerInput();\n    };\n\n    /**\n     * Fires toolbar2 action\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Embeds.prototype.toolbar2Action = function (e) {\n        var $button = $(e.target).is('button') ? $(e.target) : $(e.target).closest('button'),\n            callback = this.options.actions[$button.data('action')].clicked;\n\n        if (callback) {\n            callback(this.$el.find('.medium-media-embeds-selected'));\n        }\n\n        this.core.triggerInput();\n    };\n\n    /** Plugin initialization */\n\n    $.fn[pluginName + addonName] = function (options) {\n        return this.each(function () {\n            if (!$.data(this, 'plugin_' + pluginName + addonName)) {\n                $.data(this, 'plugin_' + pluginName + addonName, new Embeds(this, options));\n            }\n        });\n    };\n\n})(jQuery, window, document);\n","/*global MediumEditor*/\n\n; (function ($, window, document, Util, undefined) {\n\n    'use strict';\n\n    /** Default values */\n    var pluginName = 'mediumInsert',\n        addonName = 'Images', // first char is uppercase\n        defaults = {\n            label: '<span class=\"fa fa-camera\"></span>',\n            deleteMethod: 'POST',\n            deleteScript: 'delete.php',\n            preview: true,\n            captions: true,\n            captionPlaceholder: 'Type caption for image (optional)',\n            autoGrid: 3,\n            fileUploadOptions: { // See https://github.com/blueimp/jQuery-File-Upload/wiki/Options\n                url: 'upload.php',\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i\n            },\n            fileDeleteOptions: {},\n            styles: {\n                wide: {\n                    label: '<span class=\"fa fa-align-justify\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                },\n                left: {\n                    label: '<span class=\"fa fa-align-left\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                },\n                right: {\n                    label: '<span class=\"fa fa-align-right\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                },\n                grid: {\n                    label: '<span class=\"fa fa-th\"></span>'\n                    // added: function ($el) {},\n                    // removed: function ($el) {}\n                }\n            },\n            actions: {\n                remove: {\n                    label: '<span class=\"fa fa-times\"></span>',\n                    clicked: function () {\n                        var $event = $.Event('keydown');\n\n                        $event.which = 8;\n                        $(document).trigger($event);\n                    }\n                }\n            },\n            sorting: function () {\n                var that = this;\n\n                $('.medium-media-images').sortable({\n                    group: 'medium-insert-images',\n                    containerSelector: '.medium-media-images',\n                    itemSelector: 'figure',\n                    placeholder: '<figure class=\"placeholder\">',\n                    handle: 'img',\n                    nested: false,\n                    vertical: false,\n                    afterMove: function () {\n                        that.core.triggerInput();\n                    }\n                });\n            },\n            messages: {\n                acceptFileTypesError: 'This file is not in a supported format: ',\n                maxFileSizeError: 'This file is too big: '\n            }\n            // uploadCompleted: function ($el, data) {}\n        };\n\n    /**\n     * Images object\n     *\n     * Sets options, variables and calls init() function\n     *\n     * @constructor\n     * @param {DOM} el - DOM element to init the plugin on\n     * @param {object} options - Options to override defaults\n     * @return {void}\n     */\n\n    function Images(el, options) {\n        this.el = el;\n        this.$el = $(el);\n        this.$currentImage = null;\n        this.templates = window.MediumInsert.Templates;\n        this.core = this.$el.data('plugin_' + pluginName);\n\n        this.options = $.extend(true, {}, defaults, options);\n\n        this._defaults = defaults;\n        this._name = pluginName;\n\n        // Allow image preview only in browsers, that support's that\n        if (this.options.preview && !window.FileReader) {\n            this.options.preview = false;\n        }\n\n        // Extend editor's functions\n        if (this.core.getEditor()) {\n            this.core.getEditor()._serializePreImages = this.core.getEditor().serialize;\n            this.core.getEditor().serialize = this.editorSerialize;\n        }\n\n        this.init();\n    }\n\n    /**\n     * Initialization\n     *\n     * @return {void}\n     */\n\n    Images.prototype.init = function () {\n        var $images = this.$el.find('.medium-media-images');\n\n        $images.find('figcaption').attr('contenteditable', true);\n        $images.find('figure').attr('contenteditable', false);\n\n        this.events();\n        this.backwardsCompatibility();\n        this.sorting();\n    };\n\n    /**\n     * Event listeners\n     *\n     * @return {void}\n     */\n\n    Images.prototype.events = function () {\n        $(document)\n            .on('click', $.proxy(this, 'unselectImage'))\n            .on('keydown', $.proxy(this, 'removeImage'))\n            .on('click', '.medium-media-images-toolbar .medium-editor-action', $.proxy(this, 'toolbarAction'))\n            .on('click', '.medium-media-images-toolbar2 .medium-editor-action', $.proxy(this, 'toolbar2Action'));\n\n        this.$el\n            .on('click', '.medium-media-images img', $.proxy(this, 'selectImage'));\n    };\n\n    /**\n     * Replace v0.* class names with new ones\n     *\n     * @return {void}\n     */\n\n    Images.prototype.backwardsCompatibility = function () {\n        this.$el.find('.mediumInsert')\n            .removeClass('mediumInsert')\n            .addClass('medium-insert-images');\n\n        this.$el.find('.medium-media-images.small')\n            .removeClass('small')\n            .addClass('medium-insert-images-left');\n    };\n\n    /**\n     * Extend editor's serialize function\n     *\n     * @return {object} Serialized data\n     */\n\n    Images.prototype.editorSerialize = function () {\n        var data = this._serializePreImages();\n\n        $.each(data, function (key) {\n            var $data = $('<div />').html(data[key].value);\n\n            $data.find('.medium-media-images').find('figcaption, figure').removeAttr('contenteditable');\n\n            data[key].value = $data.html();\n        });\n\n        return data;\n    };\n\n    /**\n     * Add image\n     *\n     * @return {void}\n     */\n\n    Images.prototype.add = function () {\n        var that = this,\n            $file = $(this.templates['src/js/templates/images-fileupload.hbs']()),\n            fileUploadOptions = {\n                dataType: 'json',\n                add: function (e, data) {\n                    $.proxy(that, 'uploadAdd', e, data)();\n                },\n                done: function (e, data) {\n                    $.proxy(that, 'uploadDone', e, data)();\n                }\n            };\n\n        // Only add progress callbacks for browsers that support XHR2,\n        // and test for XHR2 per:\n        // http://stackoverflow.com/questions/6767887/\n        // what-is-the-best-way-to-check-for-xhr2-file-upload-support\n        if (new XMLHttpRequest().upload) {\n            fileUploadOptions.progress = function (e, data) {\n                $.proxy(that, 'uploadProgress', e, data)();\n            };\n\n            fileUploadOptions.progressall = function (e, data) {\n                $.proxy(that, 'uploadProgressall', e, data)();\n            };\n        }\n\n        $file.fileupload($.extend(true, {}, this.options.fileUploadOptions, fileUploadOptions));\n\n        $file.click();\n    };\n\n    /**\n     * Callback invoked as soon as files are added to the fileupload widget - via file input selection, drag & drop or add API call.\n     * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#add\n     *\n     * @param {Event} e\n     * @param {object} data\n     * @return {void}\n     */\n\n    Images.prototype.uploadAdd = function (e, data) {\n        var $place = this.$el.find('.medium-media-active'),\n            that = this,\n            uploadErrors = [],\n            file = data.files[0],\n            acceptFileTypes = this.options.fileUploadOptions.acceptFileTypes,\n            maxFileSize = this.options.fileUploadOptions.maxFileSize,\n            reader;\n\n        if (acceptFileTypes && !acceptFileTypes.test(file.type)) {\n            uploadErrors.push(this.options.messages.acceptFileTypesError + file.name);\n        } else if (maxFileSize && file.size > maxFileSize) {\n            uploadErrors.push(this.options.messages.maxFileSizeError + file.name);\n        }\n        if (uploadErrors.length > 0) {\n            alert(uploadErrors.join(\"\\n\"));\n            return;\n        }\n\n        this.core.hideButtons();\n\n        // Replace paragraph with div, because figure elements can't be inside paragraph\n        if ($place.is('p')) {\n            $place.replaceWith('<div class=\"medium-insert-active\">' + $place.html() + '</div>');\n            $place = this.$el.find('.medium-media-active');\n            if ($place.next().is('p')) {\n                this.core.moveCaret($place.next());\n            } else {\n                $place.after('<p><br></p>'); // add empty paragraph so we can move the caret to the next line.\n                this.core.moveCaret($place.next());\n            }\n        }\n\n        $place.addClass('medium-insert-images');\n\n        if (this.options.preview === false && $place.find('progress').length === 0 && (new XMLHttpRequest().upload)) {\n            $place.append(this.templates['src/js/templates/images-progressbar.hbs']());\n        }\n\n        if (data.autoUpload || (data.autoUpload !== false && $(e.target).fileupload('option', 'autoUpload'))) {\n            data.process().done(function () {\n                // If preview is set to true, let the showImage handle the upload start\n                if (that.options.preview) {\n                    reader = new FileReader();\n\n                    reader.onload = function (e) {\n                        $.proxy(that, 'showImage', e.target.result, data)();\n                    };\n\n                    reader.readAsDataURL(data.files[0]);\n                } else {\n                    data.submit();\n                }\n            });\n        }\n    };\n\n    /**\n     * Callback for global upload progress events\n     * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#progressall\n     *\n     * @param {Event} e\n     * @param {object} data\n     * @return {void}\n     */\n\n    Images.prototype.uploadProgressall = function (e, data) {\n        var progress, $progressbar;\n\n        if (this.options.preview === false) {\n            progress = parseInt(data.loaded / data.total * 100, 10);\n            $progressbar = this.$el.find('.medium-media-active').find('progress');\n\n            $progressbar\n                .attr('value', progress)\n                .text(progress);\n\n            if (progress === 100) {\n                $progressbar.remove();\n            }\n        }\n    };\n\n    /**\n     * Callback for upload progress events.\n     * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#progress\n     *\n     * @param {Event} e\n     * @param {object} data\n     * @return {void}\n     */\n\n    Images.prototype.uploadProgress = function (e, data) {\n        var progress, $progressbar;\n\n        if (this.options.preview) {\n            progress = 100 - parseInt(data.loaded / data.total * 100, 10);\n            $progressbar = data.context.find('.medium-media-images-progress');\n\n            $progressbar.css('width', progress + '%');\n\n            if (progress === 0) {\n                $progressbar.remove();\n            }\n        }\n    };\n\n    /**\n     * Callback for successful upload requests.\n     * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#done\n     *\n     * @param {Event} e\n     * @param {object} data\n     * @return {void}\n     */\n\n    Images.prototype.uploadDone = function (e, data) {\n        $.proxy(this, 'showImage', data.result.files[0].url, data)();\n\n        this.core.clean();\n        this.sorting();\n    };\n\n    /**\n     * Add uploaded / preview image to DOM\n     *\n     * @param {string} img\n     * @returns {void}\n     */\n\n    Images.prototype.showImage = function (img, data) {\n        var $place = this.$el.find('.medium-media-active'),\n            domImage,\n            that;\n\n        // Hide editor's placeholder\n        $place.click();\n\n        // If preview is allowed and preview image already exists,\n        // replace it with uploaded image\n        that = this;\n        if (this.options.preview && data.context) {\n            domImage = this.getDOMImage();\n            domImage.onload = function () {\n                data.context.find('img').attr('src', domImage.src);\n\n                if (this.options.uploadCompleted) {\n                    this.options.uploadCompleted(data.context, data);\n                }\n\n                that.core.triggerInput();\n            }.bind(this);\n            domImage.src = img;\n        } else {\n            data.context = $(this.templates['src/js/templates/images-image.hbs']({\n                img: img,\n                progress: this.options.preview\n            })).appendTo($place);\n\n            $place.find('br').remove();\n\n            if (this.options.autoGrid && $place.find('figure').length >= this.options.autoGrid) {\n                $.each(this.options.styles, function (style, options) {\n                    var className = 'medium-insert-images-' + style;\n\n                    $place.removeClass(className);\n\n                    if (options.removed) {\n                        options.removed($place);\n                    }\n                });\n\n                $place.addClass('medium-insert-images-grid');\n\n                if (this.options.styles.grid.added) {\n                    this.options.styles.grid.added($place);\n                }\n            }\n\n            if (this.options.preview) {\n                data.submit();\n            } else if (this.options.uploadCompleted) {\n                this.options.uploadCompleted(data.context, data);\n            }\n        }\n\n        this.core.triggerInput();\n\n        return data.context;\n    };\n\n    Images.prototype.getDOMImage = function () {\n        return new window.Image();\n    };\n\n    /**\n     * Select clicked image\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Images.prototype.selectImage = function (e) {\n        var that = this,\n            $image;\n\n        if (this.core.options.enabled) {\n            $image = $(e.target);\n\n            this.$currentImage = $image;\n\n            // Hide keyboard on mobile devices\n            this.$el.blur();\n\n            $image.addClass('medium-insert-image-active');\n            $image.closest('.medium-media-images').addClass('medium-insert-active');\n\n            setTimeout(function () {\n                that.addToolbar();\n\n                if (that.options.captions) {\n                    that.core.addCaption($image.closest('figure'), that.options.captionPlaceholder);\n                }\n            }, 50);\n        }\n    };\n\n    /**\n     * Unselect selected image\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Images.prototype.unselectImage = function (e) {\n        var $el = $(e.target),\n            $image = this.$el.find('.medium-media-image-active');\n\n        if ($el.is('img') && $el.hasClass('medium-insert-image-active')) {\n            $image.not($el).removeClass('medium-insert-image-active');\n            $('.medium-media-images-toolbar, .medium-media-images-toolbar2').remove();\n            this.core.removeCaptions($el);\n            return;\n        }\n\n        $image.removeClass('medium-insert-image-active');\n        $('.medium-media-images-toolbar, .medium-media-images-toolbar2').remove();\n\n        if ($el.is('.medium-media-caption-placeholder')) {\n            this.core.removeCaptionPlaceholder($image.closest('figure'));\n        } else if ($el.is('figcaption') === false) {\n            this.core.removeCaptions();\n        }\n        this.$currentImage = null;\n    };\n\n    /**\n     * Remove image\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Images.prototype.removeImage = function (e) {\n        var images = [],\n            $selectedImage = this.$el.find('.medium-media-image-active'),\n            $parent, $empty, selection, range, current, caretPosition, $current, $sibling, selectedHtml, i;\n\n        if (e.which === 8 || e.which === 46) {\n            if ($selectedImage.length) {\n                images.push($selectedImage);\n            }\n\n            // Remove image even if it's not selected, but backspace/del is pressed in text\n            selection = window.getSelection();\n            if (selection && selection.rangeCount) {\n                range = selection.getRangeAt(0);\n                current = range.commonAncestorContainer;\n                $current = current.nodeName === '#text' ? $(current).parent() : $(current);\n                caretPosition = MediumEditor.selection.getCaretOffsets(current).left;\n\n                // Is backspace pressed and caret is at the beginning of a paragraph, get previous element\n                if (e.which === 8 && caretPosition === 0) {\n                    $sibling = $current.prev();\n                // Is del pressed and caret is at the end of a paragraph, get next element\n                } else if (e.which === 46 && caretPosition === $current.text().length) {\n                    $sibling = $current.next();\n                }\n\n                if ($sibling && $sibling.hasClass('medium-insert-images')) {\n                    images.push($sibling.find('img'));\n                }\n\n                // If text is selected, find images in the selection\n                selectedHtml = MediumEditor.selection.getSelectionHtml(document);\n                if (selectedHtml) {\n                    $('<div></div>').html(selectedHtml).find('.medium-media-images img').each(function () {\n                        images.push($(this));\n                    });\n                }\n            }\n\n            if (images.length) {\n                for (i = 0; i < images.length; i++) {\n                    this.deleteFile(images[i].attr('src'));\n\n                    $parent = images[i].closest('.medium-media-images');\n                    images[i].closest('figure').remove();\n\n                    if ($parent.find('figure').length === 0) {\n                        $empty = $parent.next();\n                        if ($empty.is('p') === false || $empty.text() !== '') {\n                            $empty = $(this.templates['src/js/templates/core-empty-line.hbs']().trim());\n                            $parent.before($empty);\n                        }\n                        $parent.remove();\n                    }\n                }\n\n                // Hide addons\n                this.core.hideAddons();\n                if (!selectedHtml && $empty) {\n                    e.preventDefault();\n                    this.core.moveCaret($empty);\n                }\n\n                $('.medium-media-images-toolbar, .medium-media-images-toolbar2').remove();\n                this.core.triggerInput();\n            }\n        }\n    };\n\n    /**\n     * Makes ajax call to deleteScript\n     *\n     * @param {String} file File name\n     * @returns {void}\n     */\n\n    Images.prototype.deleteFile = function (file) {\n        if (this.options.deleteScript) {\n            $.ajax($.extend(true, {}, {\n                url: this.options.deleteScript,\n                type: this.options.deleteMethod || 'POST',\n                data: { file: file }\n            }, this.options.fileDeleteOptions));\n        }\n    };\n\n    /**\n     * Adds image toolbar to editor\n     *\n     * @returns {void}\n     */\n\n    Images.prototype.addToolbar = function () {\n        var $image = this.$el.find('.medium-media-image-active'),\n            $p = $image.closest('.medium-media-images'),\n            active = false,\n            mediumEditor = this.core.getEditor(),\n            toolbarContainer = mediumEditor.options.elementsContainer || 'body',\n            $toolbar, $toolbar2, top;\n\n        $(toolbarContainer).append(this.templates['src/js/templates/images-toolbar.hbs']({\n            styles: this.options.styles,\n            actions: this.options.actions\n        }).trim());\n\n        $toolbar = $('.medium-media-images-toolbar');\n        $toolbar2 = $('.medium-media-images-toolbar2');\n\n        top = $image.offset().top - $toolbar.height() - 8 - 2 - 5; // 8px - hight of an arrow under toolbar, 2px - height of an image outset, 5px - distance from an image\n        if (top < 0) {\n            top = 0;\n        }\n\n        $toolbar\n            .css({\n                top: top,\n                left: $image.offset().left + $image.width() / 2 - $toolbar.width() / 2\n            })\n            .show();\n\n        $toolbar2\n            .css({\n                top: $image.offset().top + 2, // 2px - distance from a border\n                left: $image.offset().left + $image.width() - $toolbar2.width() - 4 // 4px - distance from a border\n            })\n            .show();\n\n        $toolbar.find('button').each(function () {\n            if ($p.hasClass('medium-insert-images-' + $(this).data('action'))) {\n                $(this).addClass('medium-editor-button-active');\n                active = true;\n            }\n        });\n\n        if (active === false) {\n            $toolbar.find('button').first().addClass('medium-editor-button-active');\n        }\n    };\n\n    /**\n     * Fires toolbar action\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Images.prototype.toolbarAction = function (e) {\n        var that = this,\n            $button, $li, $ul, $lis, $p;\n\n        if (this.$currentImage === null) {\n            return;\n        }\n\n        $button = $(e.target).is('button') ? $(e.target) : $(e.target).closest('button');\n        $li = $button.closest('li');\n        $ul = $li.closest('ul');\n        $lis = $ul.find('li');\n        $p = this.$el.find('.medium-media-active');\n\n        $button.addClass('medium-editor-button-active');\n        $li.siblings().find('.medium-editor-button-active').removeClass('medium-editor-button-active');\n\n        $lis.find('button').each(function () {\n            var className = 'medium-insert-images-' + $(this).data('action');\n\n            if ($(this).hasClass('medium-editor-button-active')) {\n                $p.addClass(className);\n\n                if (that.options.styles[$(this).data('action')].added) {\n                    that.options.styles[$(this).data('action')].added($p);\n                }\n            } else {\n                $p.removeClass(className);\n\n                if (that.options.styles[$(this).data('action')].removed) {\n                    that.options.styles[$(this).data('action')].removed($p);\n                }\n            }\n        });\n\n        this.core.hideButtons();\n\n        this.core.triggerInput();\n    };\n\n    /**\n     * Fires toolbar2 action\n     *\n     * @param {Event} e\n     * @returns {void}\n     */\n\n    Images.prototype.toolbar2Action = function (e) {\n        var $button, callback;\n\n        if (this.$currentImage === null) {\n            return;\n        }\n\n        $button = $(e.target).is('button') ? $(e.target) : $(e.target).closest('button');\n        callback = this.options.actions[$button.data('action')].clicked;\n\n        if (callback) {\n            callback(this.$el.find('.medium-media-image-active'));\n        }\n\n        this.core.hideButtons();\n\n        this.core.triggerInput();\n    };\n\n    /**\n     * Initialize sorting\n     *\n     * @returns {void}\n     */\n\n    Images.prototype.sorting = function () {\n        $.proxy(this.options.sorting, this)();\n    };\n\n    /** Plugin initialization */\n\n    $.fn[pluginName + addonName] = function (options) {\n        return this.each(function () {\n            if (!$.data(this, 'plugin_' + pluginName + addonName)) {\n                $.data(this, 'plugin_' + pluginName + addonName, new Images(this, options));\n            }\n        });\n    };\n\n})(jQuery, window, document, MediumEditor.util);\n","this[\"MediumMedia\"] = this[\"MediumMedia\"] || {};\nthis[\"MediumMedia\"][\"Templates\"] = this[\"MediumMedia\"][\"Templates\"] || {};\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/core-buttons.hbs\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"            <li><a data-addon=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" data-action=\\\"add\\\" class=\\\"medium-insert-action\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</a></li>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"<div class=\\\"medium-insert-buttons\\\" contenteditable=\\\"false\\\" style=\\\"display: none\\\">\\n    <a class=\\\"medium-insert-buttons-show\\\">+</a>\\n    <ul class=\\\"medium-insert-buttons-addons\\\" style=\\\"display: none\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.addons : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </ul>\\n</div>\\n\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/core-caption.hbs\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<figcaption contenteditable=\\\"true\\\" class=\\\"medium-insert-caption-placeholder\\\" data-placeholder=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.placeholder || (depth0 != null ? depth0.placeholder : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"placeholder\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\"></figcaption>\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/core-empty-line.hbs\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<p><br></p>\\n\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/embeds-toolbar.hbs\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"    <div class=\\\"medium-insert-embeds-toolbar medium-editor-toolbar medium-toolbar-arrow-under medium-editor-toolbar-active\\\">\\n        <ul class=\\\"medium-editor-toolbar-actions clearfix\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.styles : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </ul>\\n    </div>\\n\";\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(3, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"3\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                    <li>\\n                        <button class=\\\"medium-editor-action\\\" data-action=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n                    </li>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"    <div class=\\\"medium-insert-embeds-toolbar2 medium-editor-toolbar medium-editor-toolbar-active\\\">\\n        <ul class=\\\"medium-editor-toolbar-actions clearfix\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.actions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"        </ul>\\n    </div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.styles : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.actions : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/embeds-wrapper.hbs\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper;\n\n  return \"<div class=\\\"medium-insert-embeds\\\" contenteditable=\\\"false\\\">\\n\t<figure>\\n\t\t<div class=\\\"medium-insert-embed\\\">\\n\t\t\t\"\n    + ((stack1 = ((helper = (helper = helpers.html || (depth0 != null ? depth0.html : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : {},{\"name\":\"html\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"\\n\t\t</div>\\n\t</figure>\\n\t<div class=\\\"medium-insert-embeds-overlay\\\"></div>\\n</div>\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/images-fileupload.hbs\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<input type=\\\"file\\\" multiple>\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/images-image.hbs\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    return \"        <div class=\\\"medium-insert-images-progress\\\"></div>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {};\n\n  return \"<figure contenteditable=\\\"false\\\">\\n    <img src=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"img\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\" alt=\\\"\\\" />\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.progress : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"</figure>\\n\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/images-progressbar.hbs\"] = Handlebars.template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"<progress min=\\\"0\\\" max=\\\"100\\\" value=\\\"0\\\">0</progress>\";\n},\"useData\":true});\n\nthis[\"MediumMedia\"][\"Templates\"][\"src/js/templates/images-toolbar.hbs\"] = Handlebars.template({\"1\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"2\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"                <li>\\n                    <button class=\\\"medium-editor-action\\\" data-action=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n                </li>\\n\";\n},\"4\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return \"\t<div class=\\\"medium-insert-images-toolbar2 medium-editor-toolbar medium-editor-toolbar-active\\\">\\n\t\t<ul class=\\\"medium-editor-toolbar-actions clearfix\\\">\\n\"\n    + ((stack1 = helpers.each.call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.actions : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(5, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    \t</ul>\\n    </div>\\n\";\n},\"5\":function(container,depth0,helpers,partials,data) {\n    var stack1;\n\n  return ((stack1 = helpers[\"if\"].call(depth0 != null ? depth0 : {},(depth0 != null ? depth0.label : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(6, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"6\":function(container,depth0,helpers,partials,data) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : {}, alias2=helpers.helperMissing, alias3=\"function\";\n\n  return \"        \t        <li>\\n        \t            <button class=\\\"medium-editor-action\\\" data-action=\\\"\"\n    + container.escapeExpression(((helper = (helper = helpers.key || (data && data.key)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"key\",\"hash\":{},\"data\":data}) : helper)))\n    + \"\\\">\"\n    + ((stack1 = ((helper = (helper = helpers.label || (depth0 != null ? depth0.label : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"label\",\"hash\":{},\"data\":data}) : helper))) != null ? stack1 : \"\")\n    + \"</button>\\n        \t        </li>\\n\";\n},\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var stack1, alias1=depth0 != null ? depth0 : {};\n\n  return \"<div class=\\\"medium-insert-images-toolbar medium-editor-toolbar medium-toolbar-arrow-under medium-editor-toolbar-active\\\">\\n    <ul class=\\\"medium-editor-toolbar-actions clearfix\\\">\\n\"\n    + ((stack1 = helpers.each.call(alias1,(depth0 != null ? depth0.styles : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\")\n    + \"    </ul>\\n</div>\\n\\n\"\n    + ((stack1 = helpers[\"if\"].call(alias1,(depth0 != null ? depth0.actions : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(4, data, 0),\"inverse\":container.noop,\"data\":data})) != null ? stack1 : \"\");\n},\"useData\":true});\n"],"sourceRoot":"/source/"}